// <auto-generated />
using System;
using ManagementSystem;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ManagementSystem.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220216000459_migrationthre")]
    partial class migrationthre
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("ManagementSystem.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ManagementSystem.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<int>("ParkId")
                        .HasColumnType("int");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("text");

                    b.Property<string>("RegtrationId")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParkId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("ManagementSystem.Models.Motor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CarReg")
                        .HasColumnType("text");

                    b.Property<int>("CarType")
                        .HasColumnType("int");

                    b.Property<string>("Carname")
                        .HasColumnType("text");

                    b.Property<string>("DriverId")
                        .HasColumnType("text");

                    b.Property<int?>("DriverId1")
                        .HasColumnType("int");

                    b.Property<int>("NoOfSeater")
                        .HasColumnType("int");

                    b.Property<int>("ParkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId1");

                    b.HasIndex("ParkId");

                    b.ToTable("Motors");
                });

            modelBuilder.Entity("ManagementSystem.Models.Park", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Parks");
                });

            modelBuilder.Entity("ManagementSystem.Models.ParkRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ParkId")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParkId");

                    b.HasIndex("RouteId");

                    b.ToTable("ParkRoutes");
                });

            modelBuilder.Entity("ManagementSystem.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MotorId")
                        .HasColumnType("text");

                    b.Property<int?>("MotorId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MotorId1");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ManagementSystem.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("ManagementSystem.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<int>("PackId")
                        .HasColumnType("int");

                    b.Property<int?>("ParkId")
                        .HasColumnType("int");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("text");

                    b.Property<string>("RegNum")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParkId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("ManagementSystem.Models.Driver", b =>
                {
                    b.HasOne("ManagementSystem.Models.Park", "Park")
                        .WithMany("Drivers")
                        .HasForeignKey("ParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Park");
                });

            modelBuilder.Entity("ManagementSystem.Models.Motor", b =>
                {
                    b.HasOne("ManagementSystem.Models.Driver", "Driver")
                        .WithMany("Motors")
                        .HasForeignKey("DriverId1");

                    b.HasOne("ManagementSystem.Models.Park", "Park")
                        .WithMany("Motors")
                        .HasForeignKey("ParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Park");
                });

            modelBuilder.Entity("ManagementSystem.Models.ParkRoute", b =>
                {
                    b.HasOne("ManagementSystem.Models.Park", "Park")
                        .WithMany("ParkRoutes")
                        .HasForeignKey("ParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementSystem.Models.Route", "Route")
                        .WithMany("ParkRoutes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Park");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("ManagementSystem.Models.Payment", b =>
                {
                    b.HasOne("ManagementSystem.Models.Motor", "Motor")
                        .WithMany("Payments")
                        .HasForeignKey("MotorId1");

                    b.Navigation("Motor");
                });

            modelBuilder.Entity("ManagementSystem.Models.Staff", b =>
                {
                    b.HasOne("ManagementSystem.Models.Park", "Park")
                        .WithMany("Staffs")
                        .HasForeignKey("ParkId");

                    b.Navigation("Park");
                });

            modelBuilder.Entity("ManagementSystem.Models.Driver", b =>
                {
                    b.Navigation("Motors");
                });

            modelBuilder.Entity("ManagementSystem.Models.Motor", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ManagementSystem.Models.Park", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Motors");

                    b.Navigation("ParkRoutes");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("ManagementSystem.Models.Route", b =>
                {
                    b.Navigation("ParkRoutes");
                });
#pragma warning restore 612, 618
        }
    }
}
